"""
–ú–æ–¥—É–ª—å –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–µ–±-—Å–∞–π—Ç–æ–≤.
"""

from typing import Dict, Any, Optional, Tuple
from datetime import datetime
import json

import requests
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.common.exceptions import WebDriverException
from webdriver_manager.chrome import ChromeDriverManager

from config import Config
from logs import logger
from security_analyzer import SecurityAnalyzer


class BotFunctions:
    """–ö–ª–∞—Å—Å –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."""

    @staticmethod
    def create_driver() -> webdriver.Chrome:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä Chrome WebDriver.

        Returns:
            webdriver.Chrome: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä WebDriver

        Raises:
            WebDriverException: –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å WebDriver
        """
        chrome_options = Options()

        # –û–ø—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        chrome_options.add_argument('--headless')
        chrome_options.add_argument('--disable-gpu')
        chrome_options.add_argument('--no-sandbox')
        chrome_options.add_argument('--disable-dev-shm-usage')
        chrome_options.add_argument('--disable-extensions')
        chrome_options.add_argument('--disable-popup-blocking')
        chrome_options.add_argument('--disable-blink-features=AutomationControlled')
        chrome_options.add_argument('--disable-infobars')

        # –°–∫—Ä—ã–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
        chrome_options.add_experimental_option('excludeSwitches', ['enable-automation'])
        chrome_options.add_experimental_option('useAutomationExtension', False)

        try:
            service = Service(ChromeDriverManager().install())
            driver = webdriver.Chrome(service=service, options=chrome_options)
            driver.set_page_load_timeout(Config.REQUEST_TIMEOUT)

            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π WebDriver")
            return driver

        except WebDriverException as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebDriver: {str(e)}")
            raise

    @staticmethod
    def check_virustotal(url: str) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç URL —á–µ—Ä–µ–∑ VirusTotal API.

        Args:
            url: URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        if not Config.VIRUSTOTAL_API_KEY or Config.VIRUSTOTAL_API_KEY.startswith('YOUR_'):
            logger.warning("VirusTotal API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return {}

        params = {
            'apikey': Config.VIRUSTOTAL_API_KEY,
            'resource': url,
            'scan': 1
        }

        try:
            response = requests.get(
                'https://www.virustotal.com/vtapi/v2/url/report',
                params=params,
                timeout=Config.REQUEST_TIMEOUT
            )
            response.raise_for_status()

            return response.json()

        except requests.exceptions.RequestException as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VirusTotal: {str(e)}")
            return {}
        except ValueError as e:
            logger.warning(f"VirusTotal –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON –¥–ª—è URL {url}: {str(e)}")
            return {}
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ VirusTotal: {str(e)}")
            return {}

    @staticmethod
    def build_report_message(url: str, analysis: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç—á–µ—Ç–æ–º –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.

        Args:
            url: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π URL
            analysis: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç—á–µ—Ç–æ–º
        """
        safety_level, color = SecurityAnalyzer.calculate_safety_level(analysis)

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
        domain_age = analysis['domain_checks'].get('domain_age_days', 'N/A')
        if isinstance(domain_age, int):
            domain_age = f"{domain_age} –¥–Ω–µ–π"

        ssl_days = analysis['domain_checks'].get('ssl_valid_days', 'N/A')
        if isinstance(ssl_days, int):
            ssl_days = f"{ssl_days} –¥–Ω–µ–π"

        report_msg = f"üîç –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è {url}\n\n"
        report_msg += f"üìä –£—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {safety_level}\n\n"

        report_msg += "üîé –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:\n"
        report_msg += f"üîê SSL: {'‚úÖ –î–∞' if analysis['basic_checks']['has_ssl'] else '‚ùå –ù–µ—Ç'}\n"
        report_msg += f"üìÖ –í–æ–∑—Ä–∞—Å—Ç –¥–æ–º–µ–Ω–∞: {domain_age}\n"
        report_msg += f"üìÜ SSL –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: {ssl_days}\n"
        report_msg += f"üè∑ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {analysis['basic_checks']['page_title']}\n\n"

        report_msg += "üõ° –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ñ–∏—à–∏–Ω–≥–∞:\n"
        report_msg += f"üîë –ü–æ–ª—è –ø–∞—Ä–æ–ª—è: {analysis['phishing_indicators']['password_fields']}\n"
        report_msg += f"üëÄ –°–∫—Ä—ã—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: {analysis['phishing_indicators']['hidden_elements']}\n"
        report_msg += f"üìú –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã: {analysis['phishing_indicators']['suspicious_scripts']}\n"

        if analysis['warnings']:
            report_msg += "\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:\n" + "\n".join(
                f"‚Ä¢ {warning}" for warning in analysis['warnings'])

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ä–æ–≤–Ω—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if color == "green":
            report_msg += "\n\n‚úÖ –≠—Ç–æ—Ç —Å–∞–π—Ç –≤—ã–≥–ª—è–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–º."
        elif color == "yellow":
            report_msg += "\n\n‚ö†Ô∏è –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã! –°–∞–π—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã."
        else:
            report_msg += "\n\n‚ùå –í–Ω–∏–º–∞–Ω–∏–µ! –°–∞–π—Ç –º–æ–∂–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å —É–≥—Ä–æ–∑—É."

        return report_msg

    @staticmethod
    def log_action(user_id: int, action: str, details: Optional[Dict[str, Any]] = None) -> None:
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            action: –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
            details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –¥–µ–π—Å—Ç–≤–∏—è
        """
        log_entry = {
            'timestamp': datetime.now().isoformat(),
            'user_id': user_id,
            'action': action,
            'details': details or {}
        }

        logger.info(f"–î–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {json.dumps(log_entry, ensure_ascii=False)}")