"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å Telegram –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–µ–±-—Å–∞–π—Ç–æ–≤.

–ë–æ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç URL –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ñ–∏—à–∏–Ω–≥–∞, –¥–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
"""

import locale
from typing import Optional

import telebot
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.support.wait import WebDriverWait

from config import Config
from logs import logger
from bot_functions import BotFunctions
from security_analyzer import SecurityAnalyzer


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª–∏
try:
    locale.setlocale(locale.LC_ALL, 'ru_RU.UTF-8')
except locale.Error:
    try:
        locale.setlocale(locale.LC_ALL, '')
    except locale.Error:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(Config.BOT_TOKEN)


@bot.message_handler(commands=['start', 'help'])
def send_welcome(message: telebot.types.Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /help.

    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    help_text = """
üîê –ë–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–µ–±-—Å–∞–π—Ç–æ–≤

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ URL (—Å—Å—ã–ª–∫—É), –∏ —è:
1. üì∏ –°–¥–µ–ª–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
2. üîç –ü—Ä–æ–≤–µ—Ä—é –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ñ–∏—à–∏–Ω–≥–∞  
3. üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
4. üõ°Ô∏è –î–∞–º –æ—Ü–µ–Ω–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

–ü—Ä–∏–º–µ—Ä: https://example.com

–ö–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
"""
    bot.reply_to(message, help_text)
    BotFunctions.log_action(message.from_user.id, 'start_command')


@bot.message_handler(func=lambda message: True)
def handle_url(message: telebot.types.Message) -> None:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ URL —Å–æ–æ–±—â–µ–Ω–∏–π.

    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å URL
    """
    user_id: int = message.from_user.id
    url: str = message.text.strip()

    try:
        BotFunctions.log_action(user_id, 'url_received', {'url': url})

        # –í–∞–ª–∏–¥–∞—Ü–∏—è URL
        if not _is_valid_url(url):
            error_msg: str = "‚ùå URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://"
            bot.reply_to(message, error_msg)
            BotFunctions.log_action(user_id, 'invalid_url', {'error': error_msg})
            return

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è "–ø–µ—á–∞—Ç–∞–µ—Ç"
        _send_typing_action(message.chat.id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ VirusTotal
        vt_report: dict = BotFunctions.check_virustotal(url)
        if vt_report.get('positives', 0) > 0:
            warning: str = (
                f"‚ö†Ô∏è VirusTotal –æ–±–Ω–∞—Ä—É–∂–∏–ª {vt_report['positives']} —É–≥—Ä–æ–∑. "
                "–ü—Ä–æ–¥–æ–ª–∂–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ..."
            )
            bot.send_message(message.chat.id, warning)

        # –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑
        driver = None
        try:
            _send_typing_action(message.chat.id)
            driver = BotFunctions.create_driver()
            logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {url}")

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
            driver.set_page_load_timeout(Config.REQUEST_TIMEOUT)
            driver.set_script_timeout(Config.REQUEST_TIMEOUT)

            # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            driver.get(url)

            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
            WebDriverWait(driver, Config.REQUEST_TIMEOUT).until(
                lambda d: d.execute_script('return document.readyState') == 'complete'
            )

            # –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            analysis: dict = SecurityAnalyzer.analyze_page_security(driver, url)
            screenshot: bytes = driver.get_screenshot_as_png()
            safety_level, color = SecurityAnalyzer.calculate_safety_level(analysis)

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            prefix: str = _get_safety_prefix(color)
            report_msg: str = prefix + BotFunctions.build_report_message(url, analysis)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            bot.send_photo(
                chat_id=message.chat.id,
                photo=screenshot,
                caption=report_msg
            )

            BotFunctions.log_action(user_id, 'analysis_completed', {
                'url': url,
                'safety_level': safety_level,
                'warnings_count': len(analysis['warnings'])
            })

        except TimeoutException:
            error_msg = "üïí –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"
            bot.reply_to(message, error_msg)
            logger.warning(f"–¢–∞–π–º–∞—É—Ç –¥–ª—è URL: {url}")
            BotFunctions.log_action(user_id, 'timeout_error', {'url': url})

        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL: {str(e)}"
            bot.reply_to(message, error_msg)
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL: {url} - {str(e)}")
            BotFunctions.log_action(user_id, 'processing_error', {
                'url': url,
                'error': str(e)
            })

        finally:
            if driver:
                driver.quit()

    except Exception as e:
        error_msg = f"‚ùå –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        bot.reply_to(message, error_msg)
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        BotFunctions.log_action(user_id, 'system_error', {'error': str(e)})


def _is_valid_url(url: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL.

    Args:
        url: URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

    Returns:
        bool: True –µ—Å–ª–∏ URL –≤–∞–ª–∏–¥–µ–Ω
    """
    return url.startswith(('http://', 'https://'))


def _send_typing_action(chat_id: int) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ '–ø–µ—á–∞—Ç–∞–µ—Ç' –≤ —á–∞—Ç.

    Args:
        chat_id: ID —á–∞—Ç–∞
    """
    try:
        bot.send_chat_action(chat_id, 'typing')
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å chat action: {str(e)}")


def _get_safety_prefix(color: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.

    Args:
        color: –¶–≤–µ—Ç–æ–≤–æ–π –∫–æ–¥ —É—Ä–æ–≤–Ω—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

    Returns:
        str: Emoji –ø—Ä–µ—Ñ–∏–∫—Å
    """
    prefixes = {
        "green": "‚úÖ ",
        "yellow": "‚ö†Ô∏è ",
        "orange": "üü† ",
        "red": "‚ùå "
    }
    return prefixes.get(color, "üîç ")


def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")

    try:
        bot.infinity_polling(timeout=60, long_polling_timeout=30)
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: {str(e)}")
        raise


if __name__ == '__main__':
    main()